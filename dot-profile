function set_path() {
    if [[ -d $1 ]] && [[ ":$PATH:" != *":$1:"* ]]
    then
        export PATH="$1:$PATH"
    fi
}

#gcloud bin on mac
set_path "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin"
set_path "/opt/homebrew-cask/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin"
set_path "/opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin"

set_path "/Library/TeX/texbin"
set_path "/var/lib/snapd/snap/bin"


set_path "/usr/local/go/bin"
set_path "/sbin"
set_path "/usr/sbin"
set_path "/bin"
set_path "/usr/bin"
set_path "/usr/local/bin"
set_path "/usr/local/sbin"
set_path "/opt/homebrew/bin"
set_path "/opt/homebrew/sbin"
set_path "/usr/local/opt/gnu-sed/libexec/gnubin"

export GOPATH="$HOME/code/go"
export GOBIN="$HOME/.gotools"

set_path "$HOME/.local/bin"
set_path "$GOBIN"
set_path "$HOME/.cargo/bin"
set_path "$HOME/.jenv/bin"
set_path "$HOME/.node/bin"

export PKG_CONFIG_PATH="/opt/homebrew/opt/clp/lib/pkgconfig"

set_path "$HOME/.vim/plugged/vim-iced/bin"

export NODE_PATH="$HOME/.node/lib/node_modules:$NODE_PATH"
export MANPATH="$HOME/.node/share/man:$MANPATH"

export LC_CTYPE='en_US.UTF-8'
export LC_ALL='en_US.UTF-8'
#export LC_ALL='C'
#export LANG='C'

alias wiki='nvim +VimwikiIndex'

#switch vim to nvim :)
export EDITOR="nvim"
alias vim='nvim'

export DOTFILES="$HOME/code/dotfiles"
alias dock='eval $(docker-machine env default)'

if [ -f ~/.secret.rc ]
then
    source ~/.secret.rc
fi

if command -v most > /dev/null 2>&1; then
    export PAGER="most"
fi

# tmuxifier
export TMUXIFIER_LAYOUT_PATH="$DOTFILES/tmuxifier-layouts"
set_path "$DOTFILES/tmuxifier/bin"

function code() {
    SVC=$1
    if [[ ! -z $SVC"" ]]
    then
        # find the service
        for base in "$HOME/code/ss/" "$HOME/code/" "$HOME/code/jek/" "" "$HOME/code/ColdBrew/"
        do
            if [[ -d $base$SVC ]]
            then
                tmux_code $base/$SVC $(basename $SVC)
                return
            fi
        done
    fi
    echo "Could NOT find '$SVC' starting in ~/code"
    tmux_code ~/code code
}

function tmux_code() {
    SVC=$1 WIN_NAME=$2 tmuxifier w code
}

function enl_venv() {
    if [ -d ".venv" ]
    then
        source .venv/bin/activate
    elif [ -d "venv" ]
    then
        source venv/bin/activate
    fi
}

#if [[ -f $(command -v jenv) ]]
#then
    #eval "$(jenv init -)"
#fi

alias gdrive='rclone mount drive: ~/GoogleDrive/My\ Drive --daemon --fast-list --drive-use-trash=true --allow-non-empty'
alias rgdrive='fusermount -u ~/GoogleDrive/My\ Drive'
alias t='todo.sh'
alias todo='vim ~/GoogleDrive/My\ Drive/todo-txt/todo.txt'
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm


alias doroutes='sh $HOME/code/jek/vpn-tun.sh'

function kill_falcon() {
    ps aux | grep falcon.Agent | grep root | awk '{print $2}' | xargs sudo kill -9
}

function kill_falcon_always() {
    sudo /bin/bash -c "while true; do ps aux | grep falcon.Agent | grep -v grep |grep root | awk '{print \$2}' | xargs kill -9 ; sleep 5; done"
}

function set_pkg_config() {
    export PKG_CONFIG_PATH=$(find /opt/homebrew/Cellar -name 'pkgconfig' -type d | grep lib/pkgconfig | tr '\n' ':' | sed s/.$//)
}

if type brew &>/dev/null
then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
fi
. "$HOME/.cargo/env"
export WLR_NO_HARDWARE_CURSORS=1

# Cross-platform detection functions
is_macos() { [[ "$OSTYPE" == darwin* ]]; }
is_linux() { [[ "$OSTYPE" == linux* ]]; }
has_cmd() { command -v "$1" >/dev/null 2>&1; }

# Cross-platform aliases
# Clipboard integration
if is_macos; then
    alias clip='pbcopy'
    alias paste='pbpaste'
    alias open='open'
elif has_cmd 'xclip'; then
    alias clip='xclip -selection clipboard'
    alias paste='xclip -selection clipboard -o'
    alias open='xdg-open'
elif has_cmd 'wl-copy'; then
    alias clip='wl-copy'
    alias paste='wl-paste'
    alias open='xdg-open'
fi

# Package manager shortcuts
if has_cmd 'brew'; then
    alias install='brew install'
    alias search='brew search'
    alias update='brew update && brew upgrade'
elif has_cmd 'dnf'; then
    alias install='sudo dnf install'
    alias search='dnf search'
    alias update='sudo dnf upgrade'
fi

# Modern tool aliases
has_cmd 'eza' && alias ls='eza --color=auto --icons'
has_cmd 'bat' && alias cat='bat'
has_cmd 'rg' && alias grep='rg'

# Better history settings
export HISTSIZE=50000
export SAVEHIST=50000
export HISTFILE="$HOME/.zsh_history"

# Zsh-specific history settings
if [ -n "$ZSH_VERSION" ]; then
    setopt HIST_IGNORE_DUPS
    setopt HIST_IGNORE_ALL_DUPS
    setopt HIST_IGNORE_SPACE
    setopt HIST_SAVE_NO_DUPS
    setopt SHARE_HISTORY
    setopt APPEND_HISTORY
    setopt INC_APPEND_HISTORY
fi
