export GOPATH="$HOME/code/go"
export GOBIN="$GOPATH/bin"
export PATH="$GOBIN:$PATH"
export PATH="$HOME/.gotools:$PATH"
#gcloud bin
export PATH="/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin:$PATH"
export PATH="/opt/homebrew-cask/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin:$PATH"
export PATH="/Users/Ankur/code/FlameGraph:$PATH"
export PATH="/Library/TeX/texbin:$PATH"
#export PATH="$PATH:$HOME/code/adt-bundle-mac-x86_64-20140702/sdk/platform-tools"
export EDITOR="nvim"

export LC_CTYPE='en_US.UTF-8'
#export LC_ALL='C'
#export LANG='C'

# setup java
#export JAVA_HOME=`/usr/libexec/java_home`
#export PATH=$JAVA_HOME/bin:$PATH
#$(boot2docker shellinit)
alias cdgo='cd $GOPATH'
alias wiki='nvim +VimwikiIndex'
export GROOVY_HOME=/usr/local/opt/groovy/libexec

# voltdb
alias j1.6='export JAVA_HOME=`/usr/libexec/java_home -v 1.6`'
alias j1.7='export JAVA_HOME=`/usr/libexec/java_home -v 1.7`'
alias j1.8='export JAVA_HOME=`/usr/libexec/java_home -v 1.8`'

#switch vim to nvim :)
alias vim='nvim'

#powerline
export PATH="/usr/local/lib/python2.7/site-packages:/usr/local/share/python:$PATH"

export DOTFILES="$HOME/code/dotfiles"
alias dock='eval $(docker-machine env default)'

if [ -f ~/.secret.rc ]
then
    source ~/.secret.rc
fi

alias gro='cd $GOPATH/src/github.com/'

if command -v most > /dev/null 2>&1; then
    export PAGER="most"
fi

# tmuxifier
export TMUXIFIER_LAYOUT_PATH="$DOTFILES/tmuxifier-layouts"
export PATH="$DOTFILES/tmuxifier/bin:$PATH"

function code() {
    SVC=$1
    if [[ ! -z $SVC"" ]] then
        # find the service
        for base in "" "$HOME/code/ss/" "$HOME/code/" "$HOME/code/go/src/github.com/ankurs/" "$HOME/code/go/src/github.com/carousell/"
        do
            if [[ -d $base$SVC ]] then
                tmux_code $base/$SVC $(basename $SVC)
                return
            fi
        done
    fi
    echo "Could NOT find '$SVC' starting in ~/code"
    tmux_code ~/code code
}

function tmux_code() {
    SVC=$1 WIN_NAME=$2 tmuxifier w code
}

function enl_venv() {
    if [ -d ".venv" ]
    then
        source .venv/bin/activate
    fi
}

DEPLOPYMENT_COLUMNS="custom-columns=NAME:.metadata.name,DESIRED:spec.replicas,CURRENT:status.replicas,UP-TO-DATE:status.updatedReplicas,AVAILABLE:status.availableReplicas"
HPA_COLUMNS="custom-columns=NAME:.metadata.name,CURRENT-CPU:status.currentCPUUtilizationPercentage,TARGET-CPU:spec.targetCPUUtilizationPercentage,MINPODS:spec.minReplicas,MAXPODS:spec.maxReplicas,CURRENT:status.currentReplicas"
MS_CONTEXT="gke_thecarousell.com:api-project-11554775814_asia-east1_ms-k8s-prod"
A_CONTEXT="gke_thecarousell.com:api-project-11554775814_asia-east1-a_carousell-a-k-19"
B_CONTEXT="gke_thecarousell.com:api-project-11554775814_asia-east1-b_carousell-b-k-19"
C_CONTEXT="gke_thecarousell.com:api-project-11554775814_asia-east1-c_carousell-c-k-19"
function show_kube () {
    show_zone $1
    show_ms $1
}

function show_zone () {
    CLUSTER=$1
    if [[ "${CLUSTER}" == "HPA" ]]; then
        echo "---------------------- Zone A ----------------------"
        echo "Number of NODES: $(kubectl --context ${A_CONTEXT} get no | grep -v 'NAME' | wc -l)"
        kubectl --context ${A_CONTEXT} get hpa -o $HPA_COLUMNS
        echo "---------------------- Zone B ----------------------"
        echo "Number of NODES: $(kubectl --context ${B_CONTEXT} get no | grep -v 'NAME' | wc -l)"
        kubectl --context ${B_CONTEXT} get hpa -o $HPA_COLUMNS
        echo "---------------------- Zone C ----------------------"
        echo "Number of NODES: $(kubectl --context ${C_CONTEXT} get no | grep -v 'NAME' | wc -l)"
        kubectl --context ${C_CONTEXT} get hpa -o $HPA_COLUMNS
        echo "----------------------------------------------------"
    else
        echo "---------------------- Zone A ----------------------"
        kubectl --context ${A_CONTEXT} get deployment -o $DEPLOPYMENT_COLUMNS -l track=stable
        echo "---------------------- Zone B ----------------------"
        kubectl --context ${B_CONTEXT} get deployment -o $DEPLOPYMENT_COLUMNS -l track=stable
        echo "---------------------- Zone C ----------------------"
        kubectl --context ${C_CONTEXT} get deployment -o $DEPLOPYMENT_COLUMNS -l track=stable
        echo "----------------------------------------------------"
    fi
}

function show_ms () {
    CLUSTER=$1
    if [[ "${CLUSTER}" == "HPA" ]]; then
        echo "--------------------MS Cluster----------------------"
        echo "Number of MS NODES: $(kubectl --context ${MS_CONTEXT} get no | grep -v 'NAME' | wc -l)"
        kubectl --context ${MS_CONTEXT} get hpa -o $HPA_COLUMNS
        echo "----------------------------------------------------"
    else
        echo "--------------------MS Cluster----------------------"
        kubectl --context ${MS_CONTEXT} get deployment -o $DEPLOPYMENT_COLUMNS -l track=stable
        echo "----------------------------------------------------"
    fi
}

function newjava() {
    mvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.3
}

export PATH="$HOME/.cargo/bin:$PATH"
