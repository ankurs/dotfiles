# Platform detection functions
is_macos() { [[ "$OSTYPE" == darwin* ]] }
is_linux() { [[ "$OSTYPE" == linux* ]] }
has_cmd() { command -v "$1" >/dev/null 2>&1 }

# Zinit setup with interactive installation
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

if [[ ! -f "${ZINIT_HOME}/zinit.zsh" ]]; then
    echo "ðŸš€ Zinit (modern zsh plugin manager) not found."
    echo "Would you like to install it for better performance and features? (y/n)"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        echo "Installing Zinit..."
        bash -c "$(curl -fsSL https://git.io/zinit-install)"
        # Source Zinit after installation
        [[ -f "${ZINIT_HOME}/zinit.zsh" ]] && source "${ZINIT_HOME}/zinit.zsh"
        ZINIT_AVAILABLE=true
    else
        echo "Using basic zsh setup. You can install Zinit later with:"
        echo "bash -c \"\$(curl -fsSL https://git.io/zinit-install)\""
        ZINIT_AVAILABLE=false
    fi
else
    source "${ZINIT_HOME}/zinit.zsh"
    ZINIT_AVAILABLE=true
fi

# Source profile first to get PATH setup
source ~/.profile

# Initialize completion system first
autoload -Uz compinit
compinit

# Plugin loading based on Zinit availability
if [[ "$ZINIT_AVAILABLE" == "true" ]]; then
    # Load OMZ framework and essential libraries first
    zinit snippet OMZL::git.zsh
    zinit snippet OMZL::grep.zsh
    zinit snippet OMZL::history.zsh
    zinit snippet OMZL::key-bindings.zsh
    zinit snippet OMZL::completion.zsh
    zinit snippet OMZL::theme-and-appearance.zsh
    
    # Load core OMZ plugins (well-tested ones)
    zinit snippet OMZP::git
    zinit snippet OMZP::common-aliases
    zinit snippet OMZP::vi-mode
    
    # Only load tmux plugin if tmux is available
    has_cmd "tmux" && zinit snippet OMZP::tmux
    
    # Development tools plugins (with command checks)
    has_cmd "docker" && zinit snippet OMZP::docker
    has_cmd "kubectl" && zinit snippet OMZP::kubectl
    has_cmd "pip" && zinit snippet OMZP::pip
    has_cmd "python" && zinit snippet OMZP::python
    has_cmd "mvn" && zinit snippet OMZP::mvn
    has_cmd "gradle" && zinit snippet OMZP::gradle
    
    # Platform-specific plugins (only if commands exist)
    is_macos && has_cmd "brew" && zinit snippet OMZP::brew
    is_linux && has_cmd "dnf" && zinit snippet OMZP::dnf
    
    # Modern zsh enhancements
    zinit light "zsh-users/zsh-autosuggestions"
    zinit light "zdharma-continuum/fast-syntax-highlighting"
    zinit light "zsh-users/zsh-history-substring-search"
else
    # Fallback: Basic functionality without plugin manager
    echo "Using basic zsh setup..."
    
    # Essential aliases
    alias ll='ls -la'
    alias la='ls -A'
    alias l='ls -CF'
    
    # Basic git aliases
    alias gs='git status'
    alias ga='git add'
    alias gc='git commit'
    alias gp='git push'
    alias gl='git pull'
    alias gd='git diff'
    alias gb='git branch'
    alias gco='git checkout'
    
    # Basic docker aliases
    has_cmd "docker" && {
        alias dps='docker ps'
        alias dpa='docker ps -a'
        alias di='docker images'
    }
    
    # Basic kubectl aliases
    has_cmd "kubectl" && {
        alias k='kubectl'
        alias kg='kubectl get'
        alias kd='kubectl describe'
    }
fi

# PATH already sourced above before plugin loading

# Modern tool integrations (work regardless of Zinit status)
# fzf integration
has_cmd "fzf" && {
    source <(fzf --zsh) 2>/dev/null || {
        # Fallback for older fzf versions
        [[ -f ~/.fzf.zsh ]] && source ~/.fzf.zsh
    }
}

# zoxide integration (smart cd)
has_cmd "zoxide" && eval "$(zoxide init zsh)"

# Use OMZ gentoo theme (classic and clean)
if [[ "$ZINIT_AVAILABLE" == "true" ]]; then
    # Load gentoo theme after all libraries are loaded
    zinit snippet OMZT::gentoo
else
    # Fallback: basic gentoo-style prompt
    autoload -U colors && colors
    # Simple clean prompt without vcs_info complexity
    PS1="%F{green}%n@%m%f %F{blue}%~%f %F{green}$%f "
fi

# History configuration
export HISTSIZE=50000
export SAVEHIST=50000
export HISTFILE="$HOME/.zsh_history"
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_SAVE_NO_DUPS
setopt SHARE_HISTORY
setopt APPEND_HISTORY
setopt INC_APPEND_HISTORY

# Key bindings
bindkey '^R' history-incremental-pattern-search-backward

# Reduce delay for vi mode
export KEYTIMEOUT=1

# for rvm
[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"

# for kubectl
if [ $commands[kubectl] ]; then
  source <(kubectl completion zsh)
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Custom aliases
alias claude="$HOME/.claude/local/claude"
