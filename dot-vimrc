if !has('nvim')
    set nocompatible
endif
set hidden
syntax on
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#rc()

" Let Vundle manage Vundle
Bundle 'gmarik/Vundle.vim'

" My Bundles
Bundle 'tpope/vim-sensible'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-rake'
Bundle 'nanotech/jellybeans.vim'
"Bundle 'Lokaltog/vim-powerline'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Bundle 'scrooloose/syntastic'
Bundle 'scrooloose/nerdtree'
Bundle 'jistr/vim-nerdtree-tabs'
Bundle 'kien/ctrlp.vim'
Bundle 'tacahiroy/ctrlp-funky'
Bundle 'rking/ag.vim'
Bundle 'kana/vim-textobj-user'
Bundle 'nelstrom/vim-textobj-rubyblock'
Plugin 'vim-ruby/vim-ruby'
Bundle 'slim-template/vim-slim'
Plugin 'nsf/gocode', {'rtp': 'vim/'}
"Bundle 'davidhalter/jedi-vim'
Bundle "Raimondi/delimitMate"

Bundle 'majutsushi/tagbar'
"Bundle 'ervandew/supertab'
Bundle 'bronson/vim-trailing-whitespace'

Bundle 'fatih/vim-go'
"Bundle 'garyburd/go-explorer'
Bundle 'Shougo/neocomplete.vim'
Plugin 'Valloric/YouCompleteMe'
Bundle 'Shougo/neosnippet'
Bundle 'Shougo/neosnippet-snippets'

"Plugin 'StanAngeloff/php.vim' " PHP
"Plugin 'spf13/PIV'
"let g:DisableAutoPHPFolding = 1

Bundle 'scrooloose/nerdcommenter'

"bundle 'osyo-manga/vim-over'
Plugin 'tpope/vim-markdown'
Plugin 'flazz/vim-colorschemes'

Plugin 'Yggdroot/indentLine'
Plugin 'kien/tabman.vim' " Tab management
Plugin 'szw/vim-ctrlspace'
"Plugin 'Bling/vim-airline'
Plugin 'vim-scripts/cSyntaxAfter'

Plugin 'elzr/vim-json'
"Plugin 'Lokaltog/powerline'
Plugin 'TaskList.vim'

Bundle 'cespare/vim-toml'

"for bas16 theme
Plugin 'chriskempson/base16-vim'

filetype plugin indent on

let mapleader="\\"

colorscheme apprentice
"colorscheme Tomorrow-Night

set cursorline
set expandtab
set modelines=0
set shiftwidth=4
set clipboard=unnamed
set synmaxcol=250 " for those insanly long lines
if !has('nvim')
    set ttyscroll=11
endif
set encoding=utf-8
set tabstop=4
set wrap
set number
set nowritebackup
set noswapfile
set nobackup
set hlsearch
set ignorecase
set smartcase
set guifont=Monaco:h12
set bg=dark
set t_Co=256
" for GVIM
if has("gui_running")
    "remove menu and toolbar
   set guioptions-=m
   set guioptions-=T
   set guioptions-=l
   set guioptions-=L
   set guioptions-=r
   set guioptions-=R
   set columns=95
   set lines=35
endif

nmap <leader>hs :set hlsearch! hlsearch?<CR>
nmap <leader>rt :TagbarToggle<CR>
" Automatic formatting
autocmd BufWritePre *.rb :%s/\s\+$//e
autocmd BufWritePre *.go :%s/\s\+$//e
autocmd BufWritePre *.haml :%s/\s\+$//e
autocmd BufWritePre *.html :%s/\s\+$//e
autocmd BufWritePre *.scss :%s/\s\+$//e
autocmd BufWritePre *.slim :%s/\s\+$//e

au BufNewFile * set noeol
au BufRead,BufNewFile *.go set filetype=go

" Markdown
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" No show command
autocmd VimEnter * set nosc

" indent tabs
set list lcs=tab:\|\ 

" Quick ESC
imap jj <ESC>

" Jump to the next row on long lines
map <Down> gj
map <Up>   gk
nnoremap j gj
nnoremap k gk

" format the entire file
nmap <leader>fef ggVG=

" Open new buffers
nmap <leader>s<left>   :leftabove  vnew<cr>
nmap <leader>s<right>  :rightbelow vnew<cr>
nmap <leader>s<up>     :leftabove  new<cr>
nmap <leader>s<down>   :rightbelow new<cr>

" Tab between buffers
noremap <tab> <c-w><c-w>

" Switch between last two buffers
nnoremap <leader><leader> <C-^>

" Resize buffers
if bufwinnr(1)
  nmap Ä <C-W><<C-W><
  nmap Ö <C-W>><C-W>>
  nmap ö <C-W>-<C-W>-
  nmap ä <C-W>+<C-W>+
endif

" NERDTree
nmap <leader>n :NERDTreeTabsToggle<CR>
let NERDTreeHighlightCursorline=1
"let g:nerdtree_tabs_open_on_console_startup=1

" TaskList
nmap <leader>tl :TaskList<CR>
let g:tlWindowPosition=1

"json
let g:vim_json_syntax_conceal=0
let g:indentLine_noConcealCursor=""
let g:vim_json_warnings=1

" Syntastic
let g:syntastic_mode_map = { 'mode': 'passive' }
let g:syntastic_ruby_exec = '~/.rvm/rubies/ruby-2.0.0-p0/bin/ruby'

" CtrlP
nnoremap <silent> t :CtrlP<cr>
let g:ctrlp_working_path_mode = 2
let g:ctrlp_by_filename = 1
let g:ctrlp_max_files = 600
let g:ctrlp_max_depth = 15
let g:ctrlp_max_files=0
let g:ctrlp_extensions = ['funky']

" Go programming
"set rtp+=/usr/local/Cellar/go/1.0.3/misc/vim

" Quit with :Q
command -nargs=0 Quit :qa!

"Eclim
let g:EclimCompletionMethod = 'omnifunc'
let g:EclimJavaCallHierarchyDefaultAction = "tabe"
let g:EclimJavaNewOpenAction = "tabe"
let g:EclimJavaSearchSingleResult = "tabe"
let g:EclimLoggingDisabled = 1

if !exists('g:neocomplcache_force_omni_patterns')
  let g:neocomplcache_force_omni_patterns = {}
endif
let g:neocomplcache_force_omni_patterns.java = '\k\.\k*'


" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
  endif

"for neo snippet
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For vim-go
au FileType go nmap <leader>i <Plug>(go-info)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <leader>dg <Plug>(go-def)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
let g:go_fmt_command = "gofmt"
let g:go_snippet_engine = "neosnippet"
let g:go_bin_path = expand("~/.gotools")
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

" code searches
" The Silver Searcher
" https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  " bind K to grep word under cursor
  nnoremap <Leader>k :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
endif

" set go path
let $GOPATH = expand ("~/code/go")

"eclim
nnoremap <leader>jd :JavaSearch<cr>
let g:SuperTabDefaultCompletionType = 'context'

"delimitMate
let delimitMate_expand_cr = 1

"YouCompleteMe
let g:ycm_autoclose_preview_window_after_insertion = 1

"cSyntaxAfter
autocmd! FileType c,cpp,java,go call CSyntaxAfter()

" Enable mouse in iterm
"set mouse=a

" ruby
au FileType ruby set nocursorline " disable cursor line for ruby files

"

if has('nvim')
    set clipboard+=unnamedplus
    noremap <leader>nt :tabe term://zsh<cr>
endif

"airline
let g:airline_powerline_fonts = 1
let g:airline_theme='tomorrow'

" give us 256 color schemes!
"set term=screen-256color
"set list
"set listchars=tab:▸\ ,eol:¬
