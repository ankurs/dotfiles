if !has('nvim')
    set nocompatible
endif
set hidden
syntax on
filetype off

"if empty(glob('~/.vim/autoload/plug.vim'))
"  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
"    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
"endif

"if has('nvim')
"    if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
"        silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
"           https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
"    endif
"endif

" =========== PLUGINS ===========

call plug#begin('~/.vim/plugged')

if !has('nvim')
    Plug 'tpope/vim-sensible'
endif

if has('nvim')
    Plug 'antoinemadec/FixCursorHold.nvim'
endif

Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'rking/ag.vim'
Plug 'Raimondi/delimitMate'
Plug 'majutsushi/tagbar'
Plug 'ntpeters/vim-better-whitespace'
Plug 'preservim/nerdcommenter'
Plug 'Yggdroot/indentLine'
"Plug 'kien/tabman.vim' " Tab management
Plug 'szw/vim-ctrlspace'
Plug 'vim-scripts/cSyntaxAfter'
Plug 'airblade/vim-gitgutter'
Plug 'mileszs/ack.vim'
Plug 'kien/rainbow_parentheses.vim'
"Plug 'easymotion/vim-easymotion'
Plug 'dbeniamine/todo.txt-vim'
Plug 'kshenoy/vim-signature'

" colorschemes
Plug 'flazz/vim-colorschemes'
"Plug 'morhetz/gruvbox'
"Plug 'Nequo/vim-allomancer'
"Plug 'jacoborus/tender'
"Plug 'jnurmine/Zenburn'

" language
Plug 'mdempsky/gocode', {'rtp': 'vim/'}
Plug 'fatih/vim-go' , { 'do': ':GoUpdateBinaries' }
Plug 'jodosha/vim-godebug'
Plug 'sebdah/vim-delve'
Plug 'saltstack/salt-vim' "for slat
Plug 'thiderman/vim-supervisor' "for supervisor
Plug 'davidhalter/jedi-vim'
Plug 'pangloss/vim-javascript'
Plug 'sheerun/vim-polyglot' " Huge language pack
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
"Plug 'dansomething/vim-eclim' " Eclipse - replace with lang server?
Plug 'derekwyatt/vim-scala'
Plug 'dart-lang/dart-vim-plugin'
"Plug 'guns/vim-clojure-static'
"Plug 'tpope/vim-fireplace' , { 'for': 'clojure' }
"Plug 'tpope/vim-salve' , { 'for': 'clojure' }
"Plug 'dgrnbrg/vim-redl', { 'for': 'clojure' }
"Plug 'Olical/conjure', {'tag': 'v4.7.0'}
"Plug 'bhurlow/vim-parinfer'
Plug 'tpope/vim-sexp-mappings-for-regular-people', {'for': 'clojure'}
Plug 'guns/vim-sexp',    {'for': 'clojure'}
"Plug 'lambdalisue/fern.vim'
Plug 'liquidz/vim-iced', {'for': 'clojure'}"
Plug 'liquidz/vim-iced-function-list', {'for': 'clojure', 'on': 'IcedBrowseFunction'}
"Plug 'liquidz/vim-iced-fern-debugger', {'for': 'clojure'}
"Plug 'vim-syntastic/syntastic'
Plug 'dense-analysis/ale'
Plug 'bufbuild/vim-buf'
"Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'posva/vim-vue'
Plug 'prettier/vim-prettier', { 'do': 'yarn install --frozen-lockfile --production' }
"Plug 'Valloric/YouCompleteMe' " -- use deoplete instead
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
Plug 'mfussenegger/nvim-jdtls'

" Language servers
Plug 'williamboman/mason.nvim'
Plug 'williamboman/mason-lspconfig.nvim'
Plug 'neovim/nvim-lspconfig'

" code completers
if executable('brew')
    "Plug 'codota/tabnine-nvim', { 'do': './dl_binaries.sh' }
endif
Plug 'github/copilot.vim'

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

" deoplete completers
Plug 'deoplete-plugins/deoplete-jedi'
"Plug 'deoplete-plugins/deoplete-docker'
Plug 'deoplete-plugins/deoplete-zsh'
"Plug 'ujihisa/neco-look'
Plug 'Shougo/neco-syntax'
Plug 'racer-rust/vim-racer'
if executable('brew')
    "Plug 'tbodt/deoplete-tabnine', { 'do': './install.sh' }
endif

" UML
Plug 'tyru/open-browser.vim'
Plug 'aklt/plantuml-syntax'
Plug 'weirongxu/plantuml-previewer.vim'

" Others
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'suan/vim-instant-markdown', {'for': 'markdown'}

" Data set
Plug 'vimwiki/vimwiki'

call plug#end()


" ====== CONFIG ========
"{{{ Base config
filetype plugin indent on

let mapleader="\\"

set termguicolors

" I keep switching between these color schemes
"colorscheme apprentice
"colorscheme zenburn
"colorscheme Tomorrow-Night
"colo allomancer
"colorscheme gruvbox
"let g:gruvbox_contrast_dark="light"
colorscheme OceanicNext
"colorscheme deus

set cursorline
set expandtab
set modelines=0
set shiftwidth=4
set clipboard^=unnamed,unnamedplus
set synmaxcol=450 " for those insanly long lines
if !has('nvim')
    set ttyscroll=11
endif
set encoding=utf-8
set tabstop=4
set wrap
set number
set nowritebackup
set noswapfile
set nobackup
set hlsearch
set ignorecase
set smartcase
set guifont=Monaco:h12
set background=dark
set t_Co=256
set mmp=5000
" for GVIM  -- but havent used in ages
if has('gui_running')
    "remove menu and toolbar
   set guioptions-=m
   set guioptions-=T
   set guioptions-=l
   set guioptions-=L
   set guioptions-=r
   set guioptions-=R
   set columns=95
   set lines=35
endif
nmap <leader>hs :set hlsearch! hlsearch?<CR>

" insert date
nmap <F3>f a<C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR><Esc>
nmap <F3> a<C-R>=strftime("%Y-%m-%d")<CR><Esc>
imap <F3> <C-R>=strftime("%Y-%m-%d")<CR>

" Automatic formatting
autocmd BufWritePre *.rb :%s/\s\+$//e
autocmd BufWritePre *.go :%s/\s\+$//e
autocmd BufWritePre *.haml :%s/\s\+$//e
autocmd BufWritePre *.html :%s/\s\+$//e
autocmd BufWritePre *.scss :%s/\s\+$//e
autocmd BufWritePre *.slim :%s/\s\+$//e

au BufNewFile * set noeol
au BufRead,BufNewFile *.go set filetype=go

" Markdown
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" No show command
autocmd VimEnter * set nosc

" indent tabs
set list lcs=tab:\|\ 

" Jump to the next row on long lines
map <Down> gj
map <Up>   gk
nnoremap j gj
nnoremap k gk

" format the entire file
nmap <leader>fef ggVG=

" Tab between buffers
noremap <tab> <c-w><c-w>

" Switch between last two buffers
nnoremap <leader><leader> <C-^>

set clipboard=unnamed
if has('nvim')
    set clipboard+=unnamedplus
    noremap <leader>nt :tabe term://zsh<cr>
endif

" Enable mouse
set mouse=a

" give us 256 color schemes!
"set term=screen-256color
set list
set listchars=tab:▸\ ,eol:¬
"}}}

"{{{ tagbar
nmap <leader>rt :TagbarToggle<CR>
" auto open tagbar
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

let g:tagbar_type_xslt = {
  \ 'ctagstype' : 'xslt',
  \ 'kinds' : [
    \ 'v:variables',
    \ 't:templates'
  \ ]
\}
"}}}

"{{{
let g:prettier#config#tab_width = '2'
"}}}'

"{{{ copilot
imap <silent><script><expr> <C-J> copilot#Accept("")
let g:copilot_no_tab_map = v:true
""let g:copilot_assume_mapped = v:true
imap <C-l> <Plug>(copilot-next)
imap <C-k> <Plug>(copilot-previous)
"}}}

"{{{ VimWiki
" use markdown with vimwiki and let it sync across devices
" set wiki for work
augroup filetypedetect
  au! BufRead,BufNewFile */vimwiki/*        set filetype=vimwiki
augroup END
let jek_wiki = {}
let jek_wiki.path = '~/GoogleDrive/My Drive/vimwiki/jek2'
let jek_wiki.syntax = 'markdown'
let jek_wiki.ext = '.md'

let jek3_wiki = {}
let jek3_wiki.path = '~/GoogleDrive/My Drive/vimwiki/jek3'
let jek3_wiki.syntax = 'markdown'
let jek3_wiki.ext = '.md'

let accom_wiki = {}
let accom_wiki.path = '~/GoogleDrive/My Drive/vimwiki/ss/Accom'
let accom_wiki.syntax = 'markdown'
let accom_wiki.ext = '.md'

let ss_wiki = {}
let ss_wiki.path = '~/GoogleDrive/My Drive/vimwiki/ss'
let ss_wiki.syntax = 'markdown'
let ss_wiki.ext = '.md'

" set wiki for personal
let my_wiki = {}
let my_wiki.path = '~/GoogleDrive/My Drive/vimwiki/my'
let my_wiki.syntax = 'markdown'
let my_wiki.ext = '.md'

let g:vimwiki_list = [jek3_wiki, jek_wiki, ss_wiki, accom_wiki, my_wiki]
let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}
" https://vimwiki.github.io/vimwikiwiki/Tips%20and%20Snips.html Find
" Incomplete Tasks
function! VimwikiFindIncompleteTasks()
  lvimgrep /\[ \]/ %:p
  lopen
endfunction

function! VimwikiFindAllIncompleteTasks()
  VimwikiSearch /\[ \]/
  lopen
endfunction

nmap <Leader>wa :call VimwikiFindAllIncompleteTasks()<CR>
nmap <Leader>wx :call VimwikiFindIncompleteTasks()<CR>
"}}}

"{{{ NERDTree
nnoremap <leader>n :NERDTreeTabsToggle<CR>
let NERDTreeHighlightCursorline=1
let g:nerdtree_tabs_open_on_console_startup=0
let NERDTreeShowHidden=1
"}}}

"{{{ JSON
let g:vim_json_syntax_conceal=0
let g:indentLine_noConcealCursor=''
let g:vim_json_warnings=1
"}}}

"{{{ Syntastic
"let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
"let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
""let g:syntastic_ruby_exec = '~/.rvm/rubies/ruby-2.0.0-p0/bin/ruby'
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

"let g:syntastic_python_python_exec = 'python3'
"let g:syntastic_quiet_messages = { "type": "style" }
"" install pip install bashate -- for bash support
""}}}

"{{{ ack.vim
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
"}}}

"{{{ vim-go
au FileType go nmap <leader>i <Plug>(go-info)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>gt <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <leader>dg <Plug>(go-def)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
let g:go_fmt_command = 'gofumpt'
"let g:go_snippet_engine = 'neosnippet'
let g:go_bin_path = expand('~/.gotools')
let g:go_list_type = 'quickfix'
let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck', 'golangci-lint']
let g:go_auto_type_info = 1
" syntax highlighting
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_extra_types = 1
" This trigger takes advantage of the fact that the quickfix window can be
" easily distinguished by its file-type, qf. The wincmd J command is
" equivalent to the Ctrl+W, Shift+J shortcut telling Vim to move a window to
" the very bottom (see :help :wincmd and :help ^WJ).
autocmd FileType qf wincmd J
" https://github.com/fatih/vim-go/issues/145
set synmaxcol=192
nnoremap <leader>mr :!./reinstall.sh<cr>

" set go path
let $GOPATH = expand ('~/code/go')
set rtp+=$GOPATH/src/golang.org/x/lint/misc/vim

if has('nvim')
    let g:go_term_mode = 'split'
    let g:go_term_enabled = 1
endif
"}}}
"
"{{{ UltiSnips triggering
let g:UltiSnipsExpandTrigger = '<C-y>'
let g:UltiSnipsJumpForwardTrigger = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'
"}}}

"{{{ The Silver Searcher
" https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " bind K to grep word under cursor
  nnoremap <Leader>k :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
endif
"}}}

"{{{ delimitMate
let delimitMate_expand_cr = 1
"}}}

"{{{ rust
let g:rustfmt_autosave = 1
let g:racer_cmd = expand('~/.cargo/bin/racer')
let g:racer_experimental_completer = 1
"}}}

"{{{ YouCompleteMe
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_min_num_of_chars_for_completion = 1
"}}}

"{{{ cSyntaxAfter
autocmd! FileType c,cpp,java,php,python,go call CSyntaxAfter()
"}}}

"{{{ terraform
" Enable terraform plan to be include in filter
let g:syntastic_terraform_tffilter_plan = 1
" enable(1)/disable(0) plugin's keymapping
let g:terraform_completion_keys = 1
" enable(1)/disable(0) terraform module registry completion
let g:terraform_registry_module_completion = 0
"}}}

"{{{ airline
let g:airline_powerline_fonts = 1
let g:airline_theme='tomorrow'
""let g:airline_theme='deus'
""}}}

"{{{ jedi
"let g:jedi#use_tabs_not_buffers = 1
let g:jedi#popup_on_dot = 1
let g:jedi#usages_command = '<leader>u'
"}}}

"{{{ ALE
let g:ale_linters = {
\   'java': [''],
\   'rust': ['rust-analyzer', "cargo clippy"],
\   'clojure': ['joker'],
\   'proto': ['buf-check-lint',],
\   'javascript': ['eslint'],
\   'vue': ['eslint'],
\   'go': ['golangci-lint'],
\}
let g:ale_lint_on_text_changed = 'never'
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'rust': ['rustfmt'],
\}
let g:ale_completion_tsserver_autoimport = 1
let g:ale_sign_error = '❌'
let g:ale_sign_warning = '⚠️'
let g:ale_completion_enabled = 1
let g:ale_linters_explicit = 1
let g:ale_go_golangci_lint_package = 1
"}}}

"{{{ fzf
nnoremap <silent> t :Files<cr>
nnoremap <silent> bt :BTags<cr>
"}}}

" {{{ Deoplete
let g:deoplete#enable_at_startup = 1
let g:python3_host_skip_check = 1
" deoplete tab-complete
inoremap <expr><Tab> pumvisible() ? "\<c-n>" : "\<tab>"
inoremap <expr><S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

call deoplete#custom#source('_', 'min_pattern_length', 1)
"call deoplete#custom#source('tabnine', 'rank', 80)
call deoplete#custom#source('file', 'rank', 550)
call deoplete#custom#source('LanguageClientSource', 'rank', 998)
call deoplete#custom#source('ultisnips', 'rank', 999)
call deoplete#custom#option({
    \ 'auto_complete_delay': 50,
    \ 'smart_case': v:false,
    \ })
call deoplete#custom#option('omni_patterns', {'clojure': '[\w!$%&*+/:<=>?@\^_~\-\.#]*'})
"close the preview window after completion is done.
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | silent! pclose | endif
" }}}
"
" {{{ InstantMarkdown
let g:instant_markdown_autostart = 0
" }}}

" {{{ Language Server
" Always draw sign column. Prevent buffer moving when adding/deleting sign.
set signcolumn=yes
"" Language server
" \ 'rust': ['~/.cargo/bin/rustup', 'run', 'nightly', 'rls'],
" \ 'java' : [expand('~./java-lang-server/run.sh')],
let g:LanguageClient_serverCommands = {
   \  'rust': ['rust-analyzer'],
    \ 'javascript': ['javascript-typescript-stdio'],
    \ 'javascript.jsx': ['javascript-typescript-stdio'],
    \ 'javascriptreact': ['javascript-typescript-stdio'],
    \ 'typescript': ['javascript-typescript-stdio'],
    \ 'typescript.tsx': ['javascript-typescript-stdio'],
    \ 'typescriptreact': ['javascript-typescript-stdio'],
    \ 'ruby': ['~/.rbenv/shims/solargraph', 'stdio'],
    \ 'sh': ['bash-language-server', 'start'],
    \ 'python' : ['pyls'],
    \ 'go': ['gopls'],
    \ 'clojure': [expand('~/.local/bin/clojure-lsp')],
    \ 'terraform': ['terraform-ls'],
    \ 'vue': ['vls']
    \ }
nnoremap <leader>l :call LanguageClient_contextMenu()<CR>
nnoremap <leader>h :call LanguageClient_textDocument_hover()<CR>
nnoremap <leader>df :call LanguageClient_textDocument_definition()<CR>
nnoremap <leader>rf :call LanguageClient_textDocument_references()<CR>
nnoremap <leader>im :call LanguageClient_textDocument_implementation()<CR>
nnoremap <leader>fx :call LanguageClient_textDocument_codeAction()<CR>
nnoremap <leader>ex :call LanguageClient#explainErrorAtPoint()<CR>

let g:LanguageClient_loggingFile = expand('~/.vim/LanguageClient.log')



" Run gofmt on save
autocmd BufWritePre *.go :call LanguageClient#textDocument_formatting_sync()
" }}}
"
" {{{ todo.txt
let g:Todo_txt_prefix_creation_date=1
" }}}

" {{{ Rainbow
"
function RB()
    :RainbowParenthesesLoadRound
    :RainbowParenthesesLoadBraces
    :RainbowParenthesesActivate
endfunction

" start rainbow_parentheses on clojure files
autocmd BufRead,BufNewFile * call RB()
" }}}
"
" {{{ vim-iced
let g:iced_enable_default_key_mappings = v:true
let g:iced_enable_clj_kondo_analysis = v:true
au FileType clojure nmap <Leader>gd :IcedDefJump<CR>
"let g:iced#debug#debugger = 'fern'
" }}}
"
" {{{ Tab nine
"if executable('brew')
"lua <<EOF
"require('tabnine').setup({
  "disable_auto_comment=true,
  "accept_keymap="<C-[>",
  "dismiss_keymap = "<C-]>",
  "debounce_ms = 800,
  "suggestion_color = {gui = "#FF0000", cterm = 244},
  "exclude_filetypes = {"TelescopePrompt"}
"})
"EOF
"endif
" }}}
